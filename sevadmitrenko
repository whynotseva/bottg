import asyncio
import logging
import json
import os

from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    FSInputFile
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# ==== üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ====
API_TOKEN = "7959075437:AAGFKPPV3G_tCGGoggkGLA8D5C9AFgn1yvE"
CHANNEL_USERNAME_OR_ID = "-1002490792993"
ADMIN_ID = 44054166

GPT_BOT_USERNAME = "roxsonai_bot"
PROMO_CODE = "SECRET15"
PROMO_DELAY = 10
MY_USERNAME = "dmitrenko_ai"

LOGS_FILE = "logs.json"
USERS_FILE = "users.json"
STATS_FILE = "stats.json"  # –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤ –±—É–¥—É—â–µ–º –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

# ==== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====
logging.basicConfig(level=logging.INFO)

# ==== –°–æ–∑–¥–∞—ë–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ====
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ==== FSM: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ====
class BroadcastStates(StatesGroup):
    waiting_broadcast_text = State()

# ==== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ ====
def load_logs():
    if not os.path.exists(LOGS_FILE):
        return {}
    try:
        with open(LOGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_log(user_id, action):
    logs = load_logs()
    if str(user_id) not in logs:
        logs[str(user_id)] = []
    logs[str(user_id)].append(action)

    with open(LOGS_FILE, "w", encoding="utf-8") as f:
        json.dump(logs, f, ensure_ascii=False, indent=2)

# ==== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ user_id ====
def load_users() -> set:
    if not os.path.exists(USERS_FILE):
        return set()
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data)
    except Exception:
        return set()

def save_users(users: set):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(list(users), f, ensure_ascii=False, indent=2)

# ==== /start ====
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    users = load_users()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in users:
        users.add(user_id)
        save_users(users)
        save_log(user_id, "–ù–∞–∂–∞–ª /start")

    # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–≤–æ–∑–≤—Ä–∞—â—ë–Ω –∏–∑ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π)
    welcome_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø <b>–°–µ–≤–∞ –î–º–∏—Ç—Ä–µ–Ω–∫–æ</b>, –∏ –µ—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å ‚Äì –∑–Ω–∞—á–∏—Ç, "
        "—Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, <i>–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ —Å–≤–æ—é –ø–æ–ª—å–∑—É</i>.\n\n"
        "–Ø –Ω–µ –±—É–¥—É –≥—Ä—É–∑–∏—Ç—å —Ç–µ–±—è —Å–∫—É—á–Ω—ã–º–∏ –ª–µ–∫—Ü–∏—è–º–∏ ‚Äì –ª—É—á—à–µ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂—É, "
        "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å AI —É–∂–µ —Å–µ–≥–æ–¥–Ω—è.\n\n"
        "<b>–¢—ã —É–∑–Ω–∞–µ—à—å:</b>\n"
        "‚Ä¢ –ö–∞–∫ —É—Å–∫–æ—Ä—è—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –≤ —Ä–∞–∑—ã\n"
        "‚Ä¢ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç, –∞ –∫–∞–∫–∏–µ ‚Äì –ø—Ä–æ—Å—Ç–æ —Ö–∞–π–ø\n\n"
        "‚ùå –ï—Å–ª–∏ —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ AI ‚Äì —ç—Ç–æ —Å–ª–æ–∂–Ω–æ, –∑–∞–±—É–¥—å –ø—Ä–æ —ç—Ç–æ—Ç –º–∏—Ñ. "
        "–Ø –Ω–∞—É—á—É —Ç–µ–±—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>—É–º–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</b> –±–µ–∑ –ª–∏—à–Ω–µ–π —Ç–µ–æ—Ä–∏–∏.\n\n"
        "üöÄ <b>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ!</b>"
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üî• –í—Å—Ç—É–ø–∏—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –¢–ì-–∫–∞–Ω–∞–ª",
                    url="https://t.me/+vNg5vVVonNExOWRi"
                )
            ],
            [
                InlineKeyboardButton(
                    text="ü§ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ GPT",
                    url=f"https://t.me/{GPT_BOT_USERNAME}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üöÄ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç —Å–µ—Å—Å–∏—è",
                    url=f"https://t.me/{MY_USERNAME}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìú –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–æ–º—Ç—ã –¥–ª—è GPT",
                    url="https://puddle-speedwell-70f.notion.site/pack-v0-1-1a413b51050180fe8045c303ca4d4869?pvs=4"
                )
            ]
        ]
    )

    await message.answer_photo(
        photo="https://i.postimg.cc/KYThRhy6/image.png",
        caption=welcome_text,
        parse_mode="HTML",
        reply_markup=kb
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á–µ—Ä–µ–∑ PROMO_DELAY
    asyncio.create_task(send_promo_after_delay(user_id))

async def send_promo_after_delay(chat_id: int):
    await asyncio.sleep(PROMO_DELAY)
    try:
        # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ (–≤–æ–∑–≤—Ä–∞—â—ë–Ω)
        promo_text = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É <b>15%</b> –Ω–∞ —Ç–∞—Ä–∏—Ñ—ã GPT!\n\n"
            f"üîë <b>–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥:</b> <code>{PROMO_CODE}</code>\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É."
        )

        await bot.send_message(chat_id, promo_text, parse_mode="HTML")
        save_log(chat_id, "–ü–æ–ª—É—á–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")

# ==== /logs ====
@dp.message(Command("logs"))
async def send_logs(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º.")
        return

    if not os.path.exists(LOGS_FILE):
        await message.answer("‚ùå –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    file_input = FSInputFile(LOGS_FILE)
    await message.answer_document(
        document=file_input,
        caption="–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )

# ==== /admin (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å) ====
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üë• –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    callback_data="admin_users_count"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–Ω–æ–ø–æ–∫",
                    callback_data="admin_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞",
                    callback_data="admin_broadcast"
                )
            ]
        ]
    )
    await message.answer("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", parse_mode="HTML", reply_markup=kb)

@dp.callback_query(lambda c: c.data in ["admin_users_count", "admin_stats", "admin_broadcast"])
async def admin_panel_actions(call: CallbackQuery, state: FSMContext):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    if call.data == "admin_users_count":
        users_count = len(load_users())
        await call.message.answer(
            f"üë• –í –±–æ—Ç–µ —Å–µ–π—á–∞—Å <b>{users_count}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            parse_mode="HTML"
        )

    elif call.data == "admin_stats":
        if not os.path.exists(STATS_FILE):
            await call.message.answer("üìä –ü–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç.")
            return

        with open(STATS_FILE, "r", encoding="utf-8") as f:
            stats = json.load(f)

        stats_text = "\n".join([f"üîπ {k}: {v}" for k, v in stats.items()])
        await call.message.answer(
            f"<b>–¢–û–ü –∫–Ω–æ–ø–æ–∫:</b>\n{stats_text}",
            parse_mode="HTML"
        )

    elif call.data == "admin_broadcast":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state(BroadcastStates.waiting_broadcast_text)

@dp.message(BroadcastStates.waiting_broadcast_text)
async def process_broadcast_text(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        return

    text_to_send = message.text
    all_users = load_users()
    sent_count = 0

    for uid in all_users:
        try:
            await bot.send_message(uid, text_to_send)
            sent_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ user {uid}: {e}")

    await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –∏–∑ {len(all_users)}.")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
