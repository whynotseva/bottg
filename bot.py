import asyncio
import logging
import json
import os
import aiofiles
import sqlite3
import pandas as pd
from datetime import datetime
from dotenv import load_dotenv
import signal
from signal import SIGINT, SIGTERM

from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    FSInputFile
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# ==== üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ====
load_dotenv()

API_TOKEN = os.getenv("BOT_API_TOKEN")
if not API_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

CHANNEL_USERNAME_OR_ID = "-1002490792993"
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

GPT_BOT_USERNAME = "roxsonai_bot"
PROMO_CODE = "SECRET15"
PROMO_DELAY = 10
MY_USERNAME = "dmitrenko_ai"

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É

LOGS_FILE = os.path.join(DATA_DIR, "logs.json")
USERS_FILE = os.path.join(DATA_DIR, "users.json")
STATS_FILE = os.path.join(DATA_DIR, "stats.json")
DB_FILE = os.path.join(DATA_DIR, "users.db")

# ==== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(DATA_DIR, 'bot.log')),
        logging.StreamHandler()
    ]
)

# ==== –°–æ–∑–¥–∞—ë–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ====
try:
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    raise

# ==== FSM: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ====
class BroadcastStates(StatesGroup):
    waiting_broadcast_text = State()
    confirm_broadcast = State()

# ==== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ====
def init_db():
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY,
                      username TEXT,
                      first_name TEXT,
                      last_name TEXT,
                      joined_date TEXT,
                      last_activity TEXT)''')
        conn.commit()
        conn.close()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

async def add_user(user_id: int, username: str, first_name: str, last_name: str):
    conn = None
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute('''INSERT OR REPLACE INTO users 
                     (user_id, username, first_name, last_name, joined_date, last_activity)
                     VALUES (?, ?, ?, ?, ?, ?)''',
                  (user_id, username, first_name, last_name, now, now))
        conn.commit()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise
    finally:
        if conn:
            conn.close()

async def update_user_activity(user_id: int):
    conn = None
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute('UPDATE users SET last_activity = ? WHERE user_id = ?', (now, user_id))
        conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise
    finally:
        if conn:
            conn.close()

async def get_users_list():
    conn = None
    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        c.execute('SELECT * FROM users ORDER BY joined_date DESC')
        users = c.fetchall()
        return users
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        if conn:
            conn.close()

# ==== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ ====
async def load_logs():
    if not os.path.exists(LOGS_FILE):
        return {}
    try:
        async with aiofiles.open(LOGS_FILE, "r", encoding="utf-8") as f:
            content = await f.read()
            return json.loads(content)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ –ª–æ–≥–∞—Ö")
        return {}

async def save_log(user_id, action):
    try:
        logs = await load_logs()
        if str(user_id) not in logs:
            logs[str(user_id)] = []
        logs[str(user_id)].append({
            "action": action,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })

        async with aiofiles.open(LOGS_FILE, "w", encoding="utf-8") as f:
            await f.write(json.dumps(logs, ensure_ascii=False, indent=2))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# ==== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ user_id ====
async def load_users() -> set:
    if not os.path.exists(USERS_FILE):
        return set()
    try:
        async with aiofiles.open(USERS_FILE, "r", encoding="utf-8") as f:
            content = await f.read()
            data = json.loads(content)
            return set(data)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return set()

async def save_users(users: set):
    try:
        async with aiofiles.open(USERS_FILE, "w", encoding="utf-8") as f:
            await f.write(json.dumps(list(users), ensure_ascii=False, indent=2))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# ==== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ====
async def update_button_stats(button_name: str):
    try:
        stats = {}
        if os.path.exists(STATS_FILE):
            async with aiofiles.open(STATS_FILE, "r", encoding="utf-8") as f:
                content = await f.read()
                if content:
                    stats = json.loads(content)
        
        if button_name not in stats:
            stats[button_name] = 0
        stats[button_name] += 1
        
        async with aiofiles.open(STATS_FILE, "w", encoding="utf-8") as f:
            await f.write(json.dumps(stats, ensure_ascii=False, indent=2))
            
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ {button_name}: {stats[button_name]} –Ω–∞–∂–∞—Ç–∏–π")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ {button_name}: {e}")

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ====
@dp.message(lambda message: not message.text.startswith('/'))
async def handle_unknown(message: Message):
    try:
        await update_user_activity(message.from_user.id)
        
        unknown_text = (
            "‚ùå –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üí¨ –•–æ—Ç–∏—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å AI? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="ü§ñ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π ChatGPT",
                        url=f"https://t.me/{GPT_BOT_USERNAME}"
                    )
                ]
            ]
        )
        
        await message.answer(unknown_text, reply_markup=kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ==== /start ====
@dp.message(Command("start"))
async def cmd_start(message: Message):
    try:
        user_id = message.from_user.id
        users = await load_users()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_user(
            user_id=message.from_user.id,
            username=message.from_user.username or "",
            first_name=message.from_user.first_name or "",
            last_name=message.from_user.last_name or ""
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in users:
            users.add(user_id)
            await save_users(users)
            await save_log(user_id, "–ù–∞–∂–∞–ª /start")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = [
            ("üî• –í—Å—Ç—É–ø–∏—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –¢–ì-–∫–∞–Ω–∞–ª", "https://t.me/+vNg5vVVonNExOWRi", "btn_channel"),
            ("ü§ñ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π GPT", f"https://t.me/{GPT_BOT_USERNAME}", "btn_gpt"),
            ("üöÄ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç —Å–µ—Å—Å–∏—è", f"https://t.me/{MY_USERNAME}", "btn_strat"),
            ("üìú –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–æ–º—Ç—ã –¥–ª—è GPT", "https://puddle-speedwell-70f.notion.site/pack-v0-1-1a413b51050180fe8045c303ca4d4869?pvs=4", "btn_prompts")
        ]

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=text, url=url, callback_data=callback)]
            for text, url, callback in buttons
        ])

        # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        welcome_text = (
            "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø <b>–°–µ–≤–∞ –î–º–∏—Ç—Ä–µ–Ω–∫–æ</b>, –∏ –µ—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å ‚Äì –∑–Ω–∞—á–∏—Ç, "
            "—Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, <i>–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ —Å–≤–æ—é –ø–æ–ª—å–∑—É</i>.\n\n"
            "–Ø –Ω–µ –±—É–¥—É –≥—Ä—É–∑–∏—Ç—å —Ç–µ–±—è —Å–∫—É—á–Ω—ã–º–∏ –ª–µ–∫—Ü–∏—è–º–∏ ‚Äì –ª—É—á—à–µ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂—É, "
            "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å AI —É–∂–µ —Å–µ–≥–æ–¥–Ω—è.\n\n"
            "<b>–¢—ã —É–∑–Ω–∞–µ—à—å:</b>\n"
            "‚Ä¢ –ö–∞–∫ —É—Å–∫–æ—Ä—è—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –≤ —Ä–∞–∑—ã\n"
            "‚Ä¢ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç, –∞ –∫–∞–∫–∏–µ ‚Äì –ø—Ä–æ—Å—Ç–æ —Ö–∞–π–ø\n\n"
            "‚ùå –ï—Å–ª–∏ —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ AI ‚Äì —ç—Ç–æ —Å–ª–æ–∂–Ω–æ, –∑–∞–±—É–¥—å –ø—Ä–æ —ç—Ç–æ—Ç –º–∏—Ñ. "
            "–Ø –Ω–∞—É—á—É —Ç–µ–±—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>—É–º–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</b> –±–µ–∑ –ª–∏—à–Ω–µ–π —Ç–µ–æ—Ä–∏–∏.\n\n"
            "üöÄ <b>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ!</b>"
        )

        await message.answer_photo(
            photo="https://i.postimg.cc/KYThRhy6/image.png",
            caption=welcome_text,
            parse_mode="HTML",
            reply_markup=kb
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á–µ—Ä–µ–∑ PROMO_DELAY
        asyncio.create_task(send_promo_after_delay(user_id))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_promo_after_delay(chat_id: int):
    await asyncio.sleep(PROMO_DELAY)
    try:
        promo_text = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É <b>15%</b> –Ω–∞ —Ç–∞—Ä–∏—Ñ—ã GPT!\n\n"
            f"üîë <b>–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥:</b> <code>{PROMO_CODE}</code>\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É."
        )

        await bot.send_message(chat_id, promo_text, parse_mode="HTML")
        await save_log(chat_id, "–ü–æ–ª—É—á–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")

# ==== /logs ====
@dp.message(Command("logs"))
async def send_logs(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º.")
        return

    if not os.path.exists(LOGS_FILE):
        await message.answer("‚ùå –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    try:
        file_input = FSInputFile(LOGS_FILE)
        await message.answer_document(
            document=file_input,
            caption="–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤.")

# ==== /help ====
@dp.message(Command("help"))
async def cmd_help(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    help_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "/logs - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏\n\n"
        "<b>–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–Ω–æ–ø–æ–∫\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "<b>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ bot.log\n"
        "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
    )
    await message.answer(help_text, parse_mode="HTML")

# ==== /admin (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å) ====
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –û—Ç—á—ë—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                    callback_data="admin_excel_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞",
                    callback_data="admin_broadcast"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                    callback_data="admin_close"
                )
            ]
        ]
    )
    await message.answer("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", parse_mode="HTML", reply_markup=kb)

@dp.callback_query(lambda c: c.data in ["admin_excel_stats", "admin_broadcast", "admin_close"])
async def admin_panel_actions(call: CallbackQuery, state: FSMContext):
    if call.from_user.id != ADMIN_ID:
        await call.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    try:
        if call.data == "admin_excel_stats":
            await call.message.edit_text("üìä –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç...")
            if await create_excel_report():
                file = FSInputFile("bot_statistics.xlsx")
                await call.message.answer_document(file)
                await return_to_admin_panel(call.message)
            else:
                await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
                await asyncio.sleep(2)
                await return_to_admin_panel(call.message)

        elif call.data == "admin_broadcast":
            await state.set_state(BroadcastStates.waiting_broadcast_text)
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="admin_return"
                    )
                ]]
            )
            await call.message.edit_text(
                "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
                "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞</i>",
                parse_mode="HTML",
                reply_markup=kb
            )

        elif call.data == "admin_close":
            await call.message.delete()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        await state.clear()
        await asyncio.sleep(2)
        await return_to_admin_panel(call.message)

async def return_to_admin_panel(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –û—Ç—á—ë—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                    callback_data="admin_excel_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞",
                    callback_data="admin_broadcast"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                    callback_data="admin_close"
                )
            ]
        ]
    )
    await message.edit_text("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", parse_mode="HTML", reply_markup=kb)

async def create_excel_report():
    try:
        users = await get_users_list()
        if not users:
            logging.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            return False

        users_data = []
        for user in users:
            user_id, username, first_name, last_name, joined_date, last_activity = user
            users_data.append({
                'ID': user_id,
                'Username': f"@{username}" if username else '–Ω–µ—Ç',
                '–ò–º—è': first_name or '–Ω–µ—Ç',
                '–§–∞–º–∏–ª–∏—è': last_name or '–Ω–µ—Ç',
                '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': joined_date,
                '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': last_activity
            })

        df_users = pd.DataFrame(users_data)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists('bot_statistics.xlsx'):
            os.remove('bot_statistics.xlsx')

        writer = pd.ExcelWriter('bot_statistics.xlsx', engine='xlsxwriter')
        df_users.to_excel(writer, sheet_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', index=False)
        
        workbook = writer.book
        worksheet = writer.sheets['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_format = workbook.add_format({
            'bold': True,
            'text_wrap': True,
            'valign': 'top',
            'fg_color': '#D7E4BC',
            'border': 1
        })
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫
        cell_format = workbook.add_format({
            'text_wrap': True,
            'valign': 'top',
            'border': 1
        })
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        for col_num, value in enumerate(df_users.columns.values):
            worksheet.write(0, col_num, value, header_format)
            worksheet.set_column(col_num, col_num, 15, cell_format)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            max_length = max(
                df_users[value].astype(str).apply(len).max(),
                len(str(value))
            )
            worksheet.set_column(col_num, col_num, max_length + 2)
        
        writer.close()
        
        if not os.path.exists('bot_statistics.xlsx'):
            logging.error("–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            return False
            
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞: {e}")
        return False

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö inline –∫–Ω–æ–ø–æ–∫ ====
@dp.callback_query()
async def process_callback(call: CallbackQuery):
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ callback_data
        if call.data.startswith(('admin_', 'broadcast_')):
            return
            
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await update_button_stats(call.data)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É {call.data}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
        await call.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(BroadcastStates.waiting_broadcast_text)
async def process_broadcast_text(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    await state.update_data(broadcast_text=message.text)
    
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data="broadcast_confirm"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
                    callback_data="admin_return"
                )
            ]
        ]
    )
    
    preview_text = (
        "üì¢ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        f"{message.text}\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"
    )
    
    await message.answer(preview_text, parse_mode="HTML", reply_markup=kb)

@dp.callback_query(lambda c: c.data in ["broadcast_confirm", "admin_return"])
async def process_broadcast_confirmation(call: CallbackQuery, state: FSMContext):
    if call.from_user.id != ADMIN_ID:
        await call.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    try:
        if call.data == "admin_return":
            await state.clear()
            await return_to_admin_panel(call.message)
            return

        elif call.data == "broadcast_confirm":
            data = await state.get_data()
            text_to_send = data.get("broadcast_text")
            
            if not text_to_send:
                await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                await asyncio.sleep(2)
                await return_to_admin_panel(call.message)
                return

            users = await get_users_list()
            if not users:
                await call.message.edit_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
                await state.clear()
                await asyncio.sleep(2)
                await return_to_admin_panel(call.message)
                return

            sent_count = 0
            failed_count = 0
            blocked_count = 0

            status_message = await call.message.edit_text("üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

            for user in users:
                user_id = user[0]
                if await safe_send_message(user_id, text_to_send, parse_mode="HTML"):
                    sent_count += 1
                else:
                    failed_count += 1
                
                if sent_count % 10 == 0:
                    await status_message.edit_text(
                        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {blocked_count}"
                    )

            await status_message.edit_text(
                f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {blocked_count}"
            )
            await state.clear()
            await asyncio.sleep(3)
            await return_to_admin_panel(call.message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await state.clear()
        await asyncio.sleep(3)
        await return_to_admin_panel(call.message)

async def safe_send_message(chat_id: int, text: str, parse_mode: str = None) -> bool:
    try:
        await bot.send_message(chat_id, text, parse_mode=parse_mode)
        return True
    except Exception as e:
        error_msg = str(e).lower()
        if "bot was blocked by the user" in error_msg:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        elif "chat not found" in error_msg:
            logging.warning(f"–ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return False

async def main():
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(DATA_DIR, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in [LOGS_FILE, USERS_FILE, STATS_FILE]:
            if not os.path.exists(file_path):
                logging.info(f"–°–æ–∑–¥–∞—é —Ñ–∞–π–ª {os.path.basename(file_path)}")
                async with aiofiles.open(file_path, "w", encoding="utf-8") as f:
                    if file_path == LOGS_FILE:
                        await f.write("{}")
                    elif file_path == USERS_FILE:
                        await f.write("[]")
                    elif file_path == STATS_FILE:
                        await f.write("{}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        try:
            bot_info = await bot.get_me()
            logging.info(f"–ë–æ—Ç {bot_info.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {e}")
            raise

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è graceful shutdown
        stop = asyncio.Event()
        
        async def shutdown(signal):
            logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal.name}...")
            stop.set()
            
        for signal in (SIGINT, SIGTERM):
            asyncio.get_event_loop().add_signal_handler(
                signal, lambda s=signal: asyncio.create_task(shutdown(s))
            )
            
        try:
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        finally:
            logging.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
            await bot.session.close()
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
